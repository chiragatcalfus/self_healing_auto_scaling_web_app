# SPDX-License-Identifier: MIT-0
---
# tasks file for master

# Pre-flight checks and system preparation
- name: Check system RAM
  ansible.builtin.shell: |
    total_ram=$(free -m | awk 'NR==2{print $2}')
    echo "Total RAM: ${total_ram}MB"
    if [ $total_ram -lt 1700 ]; then
      echo "WARNING: System has ${total_ram}MB RAM, but Kubernetes recommends minimum 1700MB"
    fi
  register: ram_check
  changed_when: false

- name: Display RAM check results
  ansible.builtin.debug:
    msg: "{{ ram_check.stdout }}"

# Load required kernel modules
- name: Load br_netfilter kernel module
  ansible.builtin.modprobe:
    name: br_netfilter
    state: present
  become: true

- name: Load overlay kernel module
  ansible.builtin.modprobe:
    name: overlay
    state: present
  become: true

- name: Make kernel modules persistent
  ansible.builtin.copy:
    content: |
      br_netfilter
      overlay
    dest: /etc/modules-load.d/k8s.conf
    mode: '0644'
  become: true

# Configure sysctl settings for Kubernetes
- name: Configure sysctl for Kubernetes
  ansible.builtin.copy:
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    dest: /etc/sysctl.d/k8s.conf
    mode: '0644'
  become: true

- name: Apply sysctl settings
  ansible.builtin.command: sysctl --system
  become: true
  changed_when: true

# Configure Docker as container runtime for Kubernetes
- name: Create Docker daemon configuration directory
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: '0755'
  become: true

- name: Configure Docker daemon for Kubernetes
  ansible.builtin.copy:
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }
    dest: /etc/docker/daemon.json
    mode: '0644'
  become: true
  notify: restart docker

- name: Restart Docker service
  ansible.builtin.systemd:
    name: docker
    state: restarted
    enabled: yes
  become: true

- name: Create cri-dockerd configuration directory
  ansible.builtin.file:
    path: /etc/systemd/system/cri-docker.service.d
    state: directory
    mode: '0755'
  become: true

# Install and configure cri-dockerd (required for Docker with Kubernetes 1.24+)
- name: Download cri-dockerd
  ansible.builtin.get_url:
    url: "https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.4/cri-dockerd-0.3.4.amd64.tgz"
    dest: /tmp/cri-dockerd.tgz
    mode: '0644'
  become: true

- name: Extract cri-dockerd
  ansible.builtin.unarchive:
    src: /tmp/cri-dockerd.tgz
    dest: /tmp
    remote_src: yes
  become: true

- name: Install cri-dockerd binary
  ansible.builtin.copy:
    src: /tmp/cri-dockerd/cri-dockerd
    dest: /usr/local/bin/cri-dockerd
    mode: '0755'
    remote_src: yes
  become: true

- name: Create cri-dockerd systemd service
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=CRI Interface for Docker Application Container Engine
      Documentation=https://docs.mirantis.com
      After=network-online.target firewalld.service docker.service
      Wants=network-online.target
      Requires=cri-docker.socket

      [Service]
      Type=notify
      ExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint fd://
      ExecReload=/bin/kill -s HUP $MAINPID
      TimeoutSec=0
      RestartSec=2
      Restart=always

      StartLimitBurst=3
      StartLimitInterval=60s

      LimitNOFILE=infinity
      LimitNPROC=infinity
      LimitCORE=infinity

      TasksMax=infinity
      Delegate=yes
      KillMode=process

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/cri-docker.service
    mode: '0644'
  become: true

- name: Create cri-dockerd socket service
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=CRI Docker Socket for the API
      PartOf=cri-docker.service

      [Socket]
      ListenStream=%t/cri-dockerd.sock
      SocketMode=0660
      SocketUser=root
      SocketGroup=docker

      [Install]
      WantedBy=sockets.target
    dest: /etc/systemd/system/cri-docker.socket
    mode: '0644'
  become: true

- name: Reload systemd and start cri-dockerd
  ansible.builtin.systemd:
    daemon_reload: yes
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - cri-docker.socket
    - cri-docker.service
  become: true

# Initialize Kubernetes cluster
- name: Initialize Kubernetes master with cri-dockerd - INIT
  ansible.builtin.command: >
    kubeadm init 
    --pod-network-cidr=192.168.0.0/16 
    --cri-socket=unix:///var/run/cri-dockerd.sock
    --ignore-preflight-errors=Mem
  register: kubeadm_init_output
  become: true
  failed_when: kubeadm_init_output.rc != 0 and "already exists" not in kubeadm_init_output.stderr

- name: Display kubeadm init output
  ansible.builtin.debug:
    msg: "{{ kubeadm_init_output.stdout }}"

- name: Create .kube directory
  ansible.builtin.file:
    path: /home/ubuntu/.kube
    state: directory
    owner: ubuntu
    group: ubuntu
    mode: '0755'
  become: true

- name: Copy kube config
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ubuntu/.kube/config
    owner: ubuntu
    group: ubuntu
    mode: '0644'
    remote_src: yes
  become: true

- name: Wait for kube-system pods to be ready
  ansible.builtin.shell: |
    kubectl get pods -n kube-system --no-headers | grep -v Running | grep -v Completed | wc -l
  register: pending_pods
  until: pending_pods.stdout|int == 0
  retries: 30
  delay: 10
  become: true
  become_user: ubuntu
  environment:
    KUBECONFIG: /home/ubuntu/.kube/config

- name: Install Calico CNI
  ansible.builtin.shell: |
    kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml
  become: true
  become_user: ubuntu
  environment:
    KUBECONFIG: /home/ubuntu/.kube/config

- name: Wait for Calico pods to be ready
  ansible.builtin.shell: |
    kubectl get pods -n kube-system -l k8s-app=calico-node --no-headers | grep -v Running | wc -l
  register: calico_pods
  until: calico_pods.stdout|int == 0
  retries: 30
  delay: 10
  become: true
  become_user: ubuntu
  environment:
    KUBECONFIG: /home/ubuntu/.kube/config

- name: Extract join command
  ansible.builtin.shell: kubeadm token create --print-join-command
  register: join_command
  become: true

- name: Display join command
  ansible.builtin.debug:
    msg: "{{ join_command.stdout }}"

- name: Save join command to file
  ansible.builtin.copy:
    content: "{{ join_command.stdout }} --cri-socket=unix:///var/run/cri-dockerd.sock"
    dest: /tmp/kubernetes-join-command
    mode: '0644'
  become: true

# - name: Fetch kubeconfig
#   ansible.builtin.include_tasks: fetch_kubeconfig.yaml
#   when: join_command is succeeded